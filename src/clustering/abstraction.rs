use crate::cards::observation::Observation;
use std::hash::Hash;

/// Abstraction represents a lookup value for a given set of Observations.
///
/// - River: we use a u8 to represent the equity bucket, i.e. Equity(0) is the worst bucket, and Equity(50) is the best bucket.
/// - Pre-Flop: we do not use any abstraction, rather store the 169 strategically-unique hands as u64.
/// - Other Streets: we use a u64 to represent the hash signature of the centroid Histogram over lower layers of abstraction.
#[derive(Default, Copy, Clone, Hash, Eq, PartialEq, Debug, PartialOrd, Ord)]
pub struct Abstraction(u64); // hash signature generated by the centroid histogram over lower layers of abstraction

impl Abstraction {
    pub const BUCKETS: u8 = 32;
    pub fn random() -> Self {
        Self(rand::random::<u64>())
    }
}
impl From<&Observation> for Abstraction {
    fn from(observation: &Observation) -> Self {
        let equity = observation.equity();
        let bucket = equity * Self::BUCKETS as f32;
        Self::from(bucket as u64)
    }
}

impl From<Abstraction> for u64 {
    fn from(a: Abstraction) -> Self {
        a.0
    }
}
impl From<u64> for Abstraction {
    fn from(n: u64) -> Self {
        Abstraction(n)
    }
}

/// Conversion to i64 for SQL storage.
impl From<Abstraction> for i64 {
    fn from(abstraction: Abstraction) -> Self {
        u64::from(abstraction) as i64
    }
}
impl From<i64> for Abstraction {
    fn from(n: i64) -> Self {
        Abstraction(n as u64)
    }
}
