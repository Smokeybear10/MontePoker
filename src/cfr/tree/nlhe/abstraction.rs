use super::{histogram::Histogram, observation::Observation};
use std::hash::{DefaultHasher, Hash, Hasher};

#[derive(Copy, Clone, Hash, Eq, PartialEq, Debug, PartialOrd, Ord)]
pub enum Abstraction {
    Equity(u8), // "percentile" (discrete) ranking of showown equity, assembled into 2% -wide buckets
    Signed(u64), // hash signature generated by the centroid histogram over lower layers of abstraction
}

const BUCKETS: usize = 32;
impl From<&Observation> for Abstraction {
    fn from(observation: &Observation) -> Self {
        Self::Equity((BUCKETS as f32 * observation.equity()) as u8)
    }
}

impl From<&Histogram> for Abstraction {
    fn from(histogram: &Histogram) -> Self {
        let ref mut hasher = DefaultHasher::new();
        histogram.hash(hasher);
        Self::Signed(hasher.finish())
    }
}
